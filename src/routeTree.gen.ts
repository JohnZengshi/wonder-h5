/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as WalletDetailsImport } from './routes/wallet-details'
import { Route as ProductImport } from './routes/product'
import { Route as OrderImport } from './routes/order'
import { Route as HomeImport } from './routes/home'
import { Route as CartImport } from './routes/cart'
import { Route as CardSecretsImport } from './routes/card-secrets'
import { Route as IndexImport } from './routes/index'
import { Route as IntiveIndexImport } from './routes/intive/index'
import { Route as HomeIndexImport } from './routes/home/index'
import { Route as IntiveInviteListImport } from './routes/intive/invite-list'
import { Route as HomeMineImport } from './routes/home/mine'
import { Route as HomeLogImport } from './routes/home/log'
import { Route as HomeCategoryImport } from './routes/home/category'
import { Route as HomeAiPowerImport } from './routes/home/ai-power'

// Create/Update Routes

const WalletDetailsRoute = WalletDetailsImport.update({
  id: '/wallet-details',
  path: '/wallet-details',
  getParentRoute: () => rootRoute,
} as any)

const ProductRoute = ProductImport.update({
  id: '/product',
  path: '/product',
  getParentRoute: () => rootRoute,
} as any)

const OrderRoute = OrderImport.update({
  id: '/order',
  path: '/order',
  getParentRoute: () => rootRoute,
} as any)

const HomeRoute = HomeImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => rootRoute,
} as any)

const CartRoute = CartImport.update({
  id: '/cart',
  path: '/cart',
  getParentRoute: () => rootRoute,
} as any)

const CardSecretsRoute = CardSecretsImport.update({
  id: '/card-secrets',
  path: '/card-secrets',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const IntiveIndexRoute = IntiveIndexImport.update({
  id: '/intive/',
  path: '/intive/',
  getParentRoute: () => rootRoute,
} as any)

const HomeIndexRoute = HomeIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => HomeRoute,
} as any)

const IntiveInviteListRoute = IntiveInviteListImport.update({
  id: '/intive/invite-list',
  path: '/intive/invite-list',
  getParentRoute: () => rootRoute,
} as any)

const HomeMineRoute = HomeMineImport.update({
  id: '/mine',
  path: '/mine',
  getParentRoute: () => HomeRoute,
} as any)

const HomeLogRoute = HomeLogImport.update({
  id: '/log',
  path: '/log',
  getParentRoute: () => HomeRoute,
} as any)

const HomeCategoryRoute = HomeCategoryImport.update({
  id: '/category',
  path: '/category',
  getParentRoute: () => HomeRoute,
} as any)

const HomeAiPowerRoute = HomeAiPowerImport.update({
  id: '/ai-power',
  path: '/ai-power',
  getParentRoute: () => HomeRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/card-secrets': {
      id: '/card-secrets'
      path: '/card-secrets'
      fullPath: '/card-secrets'
      preLoaderRoute: typeof CardSecretsImport
      parentRoute: typeof rootRoute
    }
    '/cart': {
      id: '/cart'
      path: '/cart'
      fullPath: '/cart'
      preLoaderRoute: typeof CartImport
      parentRoute: typeof rootRoute
    }
    '/home': {
      id: '/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeImport
      parentRoute: typeof rootRoute
    }
    '/order': {
      id: '/order'
      path: '/order'
      fullPath: '/order'
      preLoaderRoute: typeof OrderImport
      parentRoute: typeof rootRoute
    }
    '/product': {
      id: '/product'
      path: '/product'
      fullPath: '/product'
      preLoaderRoute: typeof ProductImport
      parentRoute: typeof rootRoute
    }
    '/wallet-details': {
      id: '/wallet-details'
      path: '/wallet-details'
      fullPath: '/wallet-details'
      preLoaderRoute: typeof WalletDetailsImport
      parentRoute: typeof rootRoute
    }
    '/home/ai-power': {
      id: '/home/ai-power'
      path: '/ai-power'
      fullPath: '/home/ai-power'
      preLoaderRoute: typeof HomeAiPowerImport
      parentRoute: typeof HomeImport
    }
    '/home/category': {
      id: '/home/category'
      path: '/category'
      fullPath: '/home/category'
      preLoaderRoute: typeof HomeCategoryImport
      parentRoute: typeof HomeImport
    }
    '/home/log': {
      id: '/home/log'
      path: '/log'
      fullPath: '/home/log'
      preLoaderRoute: typeof HomeLogImport
      parentRoute: typeof HomeImport
    }
    '/home/mine': {
      id: '/home/mine'
      path: '/mine'
      fullPath: '/home/mine'
      preLoaderRoute: typeof HomeMineImport
      parentRoute: typeof HomeImport
    }
    '/intive/invite-list': {
      id: '/intive/invite-list'
      path: '/intive/invite-list'
      fullPath: '/intive/invite-list'
      preLoaderRoute: typeof IntiveInviteListImport
      parentRoute: typeof rootRoute
    }
    '/home/': {
      id: '/home/'
      path: '/'
      fullPath: '/home/'
      preLoaderRoute: typeof HomeIndexImport
      parentRoute: typeof HomeImport
    }
    '/intive/': {
      id: '/intive/'
      path: '/intive'
      fullPath: '/intive'
      preLoaderRoute: typeof IntiveIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface HomeRouteChildren {
  HomeAiPowerRoute: typeof HomeAiPowerRoute
  HomeCategoryRoute: typeof HomeCategoryRoute
  HomeLogRoute: typeof HomeLogRoute
  HomeMineRoute: typeof HomeMineRoute
  HomeIndexRoute: typeof HomeIndexRoute
}

const HomeRouteChildren: HomeRouteChildren = {
  HomeAiPowerRoute: HomeAiPowerRoute,
  HomeCategoryRoute: HomeCategoryRoute,
  HomeLogRoute: HomeLogRoute,
  HomeMineRoute: HomeMineRoute,
  HomeIndexRoute: HomeIndexRoute,
}

const HomeRouteWithChildren = HomeRoute._addFileChildren(HomeRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/card-secrets': typeof CardSecretsRoute
  '/cart': typeof CartRoute
  '/home': typeof HomeRouteWithChildren
  '/order': typeof OrderRoute
  '/product': typeof ProductRoute
  '/wallet-details': typeof WalletDetailsRoute
  '/home/ai-power': typeof HomeAiPowerRoute
  '/home/category': typeof HomeCategoryRoute
  '/home/log': typeof HomeLogRoute
  '/home/mine': typeof HomeMineRoute
  '/intive/invite-list': typeof IntiveInviteListRoute
  '/home/': typeof HomeIndexRoute
  '/intive': typeof IntiveIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/card-secrets': typeof CardSecretsRoute
  '/cart': typeof CartRoute
  '/order': typeof OrderRoute
  '/product': typeof ProductRoute
  '/wallet-details': typeof WalletDetailsRoute
  '/home/ai-power': typeof HomeAiPowerRoute
  '/home/category': typeof HomeCategoryRoute
  '/home/log': typeof HomeLogRoute
  '/home/mine': typeof HomeMineRoute
  '/intive/invite-list': typeof IntiveInviteListRoute
  '/home': typeof HomeIndexRoute
  '/intive': typeof IntiveIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/card-secrets': typeof CardSecretsRoute
  '/cart': typeof CartRoute
  '/home': typeof HomeRouteWithChildren
  '/order': typeof OrderRoute
  '/product': typeof ProductRoute
  '/wallet-details': typeof WalletDetailsRoute
  '/home/ai-power': typeof HomeAiPowerRoute
  '/home/category': typeof HomeCategoryRoute
  '/home/log': typeof HomeLogRoute
  '/home/mine': typeof HomeMineRoute
  '/intive/invite-list': typeof IntiveInviteListRoute
  '/home/': typeof HomeIndexRoute
  '/intive/': typeof IntiveIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/card-secrets'
    | '/cart'
    | '/home'
    | '/order'
    | '/product'
    | '/wallet-details'
    | '/home/ai-power'
    | '/home/category'
    | '/home/log'
    | '/home/mine'
    | '/intive/invite-list'
    | '/home/'
    | '/intive'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/card-secrets'
    | '/cart'
    | '/order'
    | '/product'
    | '/wallet-details'
    | '/home/ai-power'
    | '/home/category'
    | '/home/log'
    | '/home/mine'
    | '/intive/invite-list'
    | '/home'
    | '/intive'
  id:
    | '__root__'
    | '/'
    | '/card-secrets'
    | '/cart'
    | '/home'
    | '/order'
    | '/product'
    | '/wallet-details'
    | '/home/ai-power'
    | '/home/category'
    | '/home/log'
    | '/home/mine'
    | '/intive/invite-list'
    | '/home/'
    | '/intive/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CardSecretsRoute: typeof CardSecretsRoute
  CartRoute: typeof CartRoute
  HomeRoute: typeof HomeRouteWithChildren
  OrderRoute: typeof OrderRoute
  ProductRoute: typeof ProductRoute
  WalletDetailsRoute: typeof WalletDetailsRoute
  IntiveInviteListRoute: typeof IntiveInviteListRoute
  IntiveIndexRoute: typeof IntiveIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CardSecretsRoute: CardSecretsRoute,
  CartRoute: CartRoute,
  HomeRoute: HomeRouteWithChildren,
  OrderRoute: OrderRoute,
  ProductRoute: ProductRoute,
  WalletDetailsRoute: WalletDetailsRoute,
  IntiveInviteListRoute: IntiveInviteListRoute,
  IntiveIndexRoute: IntiveIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/card-secrets",
        "/cart",
        "/home",
        "/order",
        "/product",
        "/wallet-details",
        "/intive/invite-list",
        "/intive/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/card-secrets": {
      "filePath": "card-secrets.tsx"
    },
    "/cart": {
      "filePath": "cart.tsx"
    },
    "/home": {
      "filePath": "home.tsx",
      "children": [
        "/home/ai-power",
        "/home/category",
        "/home/log",
        "/home/mine",
        "/home/"
      ]
    },
    "/order": {
      "filePath": "order.tsx"
    },
    "/product": {
      "filePath": "product.tsx"
    },
    "/wallet-details": {
      "filePath": "wallet-details.tsx"
    },
    "/home/ai-power": {
      "filePath": "home/ai-power.tsx",
      "parent": "/home"
    },
    "/home/category": {
      "filePath": "home/category.tsx",
      "parent": "/home"
    },
    "/home/log": {
      "filePath": "home/log.tsx",
      "parent": "/home"
    },
    "/home/mine": {
      "filePath": "home/mine.tsx",
      "parent": "/home"
    },
    "/intive/invite-list": {
      "filePath": "intive/invite-list.tsx"
    },
    "/home/": {
      "filePath": "home/index.tsx",
      "parent": "/home"
    },
    "/intive/": {
      "filePath": "intive/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
