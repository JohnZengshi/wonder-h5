/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ProductImport } from './routes/product'
import { Route as HomeImport } from './routes/home'
import { Route as IndexImport } from './routes/index'
import { Route as MineIndexImport } from './routes/mine/index'
import { Route as HomeIndexImport } from './routes/home/index'
import { Route as MineOrderImport } from './routes/mine/order'
import { Route as MineIntiveImport } from './routes/mine/intive'
import { Route as MineCardSecretsImport } from './routes/mine/card-secrets'
import { Route as HomeCategoryImport } from './routes/home/category'
import { Route as HomeCartImport } from './routes/home/cart'

// Create/Update Routes

const ProductRoute = ProductImport.update({
  id: '/product',
  path: '/product',
  getParentRoute: () => rootRoute,
} as any)

const HomeRoute = HomeImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const MineIndexRoute = MineIndexImport.update({
  id: '/mine/',
  path: '/mine/',
  getParentRoute: () => rootRoute,
} as any)

const HomeIndexRoute = HomeIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => HomeRoute,
} as any)

const MineOrderRoute = MineOrderImport.update({
  id: '/mine/order',
  path: '/mine/order',
  getParentRoute: () => rootRoute,
} as any)

const MineIntiveRoute = MineIntiveImport.update({
  id: '/mine/intive',
  path: '/mine/intive',
  getParentRoute: () => rootRoute,
} as any)

const MineCardSecretsRoute = MineCardSecretsImport.update({
  id: '/mine/card-secrets',
  path: '/mine/card-secrets',
  getParentRoute: () => rootRoute,
} as any)

const HomeCategoryRoute = HomeCategoryImport.update({
  id: '/category',
  path: '/category',
  getParentRoute: () => HomeRoute,
} as any)

const HomeCartRoute = HomeCartImport.update({
  id: '/cart',
  path: '/cart',
  getParentRoute: () => HomeRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/home': {
      id: '/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeImport
      parentRoute: typeof rootRoute
    }
    '/product': {
      id: '/product'
      path: '/product'
      fullPath: '/product'
      preLoaderRoute: typeof ProductImport
      parentRoute: typeof rootRoute
    }
    '/home/cart': {
      id: '/home/cart'
      path: '/cart'
      fullPath: '/home/cart'
      preLoaderRoute: typeof HomeCartImport
      parentRoute: typeof HomeImport
    }
    '/home/category': {
      id: '/home/category'
      path: '/category'
      fullPath: '/home/category'
      preLoaderRoute: typeof HomeCategoryImport
      parentRoute: typeof HomeImport
    }
    '/mine/card-secrets': {
      id: '/mine/card-secrets'
      path: '/mine/card-secrets'
      fullPath: '/mine/card-secrets'
      preLoaderRoute: typeof MineCardSecretsImport
      parentRoute: typeof rootRoute
    }
    '/mine/intive': {
      id: '/mine/intive'
      path: '/mine/intive'
      fullPath: '/mine/intive'
      preLoaderRoute: typeof MineIntiveImport
      parentRoute: typeof rootRoute
    }
    '/mine/order': {
      id: '/mine/order'
      path: '/mine/order'
      fullPath: '/mine/order'
      preLoaderRoute: typeof MineOrderImport
      parentRoute: typeof rootRoute
    }
    '/home/': {
      id: '/home/'
      path: '/'
      fullPath: '/home/'
      preLoaderRoute: typeof HomeIndexImport
      parentRoute: typeof HomeImport
    }
    '/mine/': {
      id: '/mine/'
      path: '/mine'
      fullPath: '/mine'
      preLoaderRoute: typeof MineIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface HomeRouteChildren {
  HomeCartRoute: typeof HomeCartRoute
  HomeCategoryRoute: typeof HomeCategoryRoute
  HomeIndexRoute: typeof HomeIndexRoute
}

const HomeRouteChildren: HomeRouteChildren = {
  HomeCartRoute: HomeCartRoute,
  HomeCategoryRoute: HomeCategoryRoute,
  HomeIndexRoute: HomeIndexRoute,
}

const HomeRouteWithChildren = HomeRoute._addFileChildren(HomeRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/home': typeof HomeRouteWithChildren
  '/product': typeof ProductRoute
  '/home/cart': typeof HomeCartRoute
  '/home/category': typeof HomeCategoryRoute
  '/mine/card-secrets': typeof MineCardSecretsRoute
  '/mine/intive': typeof MineIntiveRoute
  '/mine/order': typeof MineOrderRoute
  '/home/': typeof HomeIndexRoute
  '/mine': typeof MineIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/product': typeof ProductRoute
  '/home/cart': typeof HomeCartRoute
  '/home/category': typeof HomeCategoryRoute
  '/mine/card-secrets': typeof MineCardSecretsRoute
  '/mine/intive': typeof MineIntiveRoute
  '/mine/order': typeof MineOrderRoute
  '/home': typeof HomeIndexRoute
  '/mine': typeof MineIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/home': typeof HomeRouteWithChildren
  '/product': typeof ProductRoute
  '/home/cart': typeof HomeCartRoute
  '/home/category': typeof HomeCategoryRoute
  '/mine/card-secrets': typeof MineCardSecretsRoute
  '/mine/intive': typeof MineIntiveRoute
  '/mine/order': typeof MineOrderRoute
  '/home/': typeof HomeIndexRoute
  '/mine/': typeof MineIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/home'
    | '/product'
    | '/home/cart'
    | '/home/category'
    | '/mine/card-secrets'
    | '/mine/intive'
    | '/mine/order'
    | '/home/'
    | '/mine'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/product'
    | '/home/cart'
    | '/home/category'
    | '/mine/card-secrets'
    | '/mine/intive'
    | '/mine/order'
    | '/home'
    | '/mine'
  id:
    | '__root__'
    | '/'
    | '/home'
    | '/product'
    | '/home/cart'
    | '/home/category'
    | '/mine/card-secrets'
    | '/mine/intive'
    | '/mine/order'
    | '/home/'
    | '/mine/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  HomeRoute: typeof HomeRouteWithChildren
  ProductRoute: typeof ProductRoute
  MineCardSecretsRoute: typeof MineCardSecretsRoute
  MineIntiveRoute: typeof MineIntiveRoute
  MineOrderRoute: typeof MineOrderRoute
  MineIndexRoute: typeof MineIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  HomeRoute: HomeRouteWithChildren,
  ProductRoute: ProductRoute,
  MineCardSecretsRoute: MineCardSecretsRoute,
  MineIntiveRoute: MineIntiveRoute,
  MineOrderRoute: MineOrderRoute,
  MineIndexRoute: MineIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/home",
        "/product",
        "/mine/card-secrets",
        "/mine/intive",
        "/mine/order",
        "/mine/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/home": {
      "filePath": "home.tsx",
      "children": [
        "/home/cart",
        "/home/category",
        "/home/"
      ]
    },
    "/product": {
      "filePath": "product.tsx"
    },
    "/home/cart": {
      "filePath": "home/cart.tsx",
      "parent": "/home"
    },
    "/home/category": {
      "filePath": "home/category.tsx",
      "parent": "/home"
    },
    "/mine/card-secrets": {
      "filePath": "mine/card-secrets.tsx"
    },
    "/mine/intive": {
      "filePath": "mine/intive.tsx"
    },
    "/mine/order": {
      "filePath": "mine/order.tsx"
    },
    "/home/": {
      "filePath": "home/index.tsx",
      "parent": "/home"
    },
    "/mine/": {
      "filePath": "mine/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
